def COLOR_MAP = [
       'SUCCESS': 'good',
       'FAILURE': 'danger',
]
pipeline {  
    agent any
    tools {
        maven "maven3"
        jdk "davjdk8"
    }
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "172.31.18.75:8081"
        SNAP_REPO = "dave-snapshot"
        RELEASE_REPO= "dave-release"
        NEXUS_USER = "admin"
        NEXUS_PASS = "ayuk1234"
        CENTRAL_REPO = "maven-central-repo"
        NEXUS_GRP_REPO = "dave-group-repo"
        NEXUSIP = "172.31.18.75"
        NEXUSPORT = "8081"
        NEXUS_LOGIN = "nexuslogin"
        SONARSCANNER = "sonarscanner"
        SONARSERVER = "sonarserver"
        registryCredential = "dockerhublogin"
        registry = "ayukdavidashu/cicd-kubernetes"
        PROJECT_NAME = "bsecproj-java"
        REPOSITORY_TYPE = "git"
        REPOSITORY_URL = "https://github.com/fridadavid/cicd-kubernetes.git"
        PROJECT_ID = ""
        //BEAGLE_AUTH_TOKEN = "wty1wnmnmh8kwi509m9py5j8o56kquhq"

        

        

    }
    
    stages {
        stage ('code checkout'){
            steps {
               git branch: 'main', credentialsId: 'gitcred', url: 'https://github.com/fridadavid/cicd-kubernetes.git'
            }
        }
        stage('Build') {
            steps {
                sh  'mvn -s settings.xml clean install -U'
            }
            post {
                success {
                    echo 'Archiving'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }
stage('unit test') {
            steps {
                sh  'mvn  -s settings.xml test'
            }
    }
    stage ('checkstyle code analysis') {
            steps {
                sh  'mvn -s settings.xml checkstyle:checkstyle'
            }
        }
        stage('code analysis with sonarqube') {
          environment {
             scannerHome = tool "${sonarscanner}"
          }

          steps {
            withSonarQubeEnv("${sonarserver}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=davepro-sonar \
                   -Dsonar.projectName=davpro-sonar \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
            }

            
          }
        }
        stage('qgate'){
            steps {
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Beagle Security login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'bseclogin', usernameVariable: 'BEAGLE_USERNAME', passwordVariable: 'BEAGLE_PASSWORD')]) {
                    sh 'curl -u $BEAGLE_USERNAME:$BEAGLE_PASSWORD -X POST "https://beaglesecurity.com/api/v1/auth/login"'
                    
                }
            }
        }
        /*
        stage('scan project'){
            steps{
                 sh 'curl -H "Content-Type:application/json" -H "X-AUTH-TOKEN:$BEAGLE_AUTH_TOKEN" -X POST "https://beaglesecurity.com/api/v1/project" -d \'{"project_name":"$PROJECT_NAME", "repository_type":"$REPOSITORY_TYPE", "repository_url":"$REPOSITORY_URL"}\''
                 sh 'SCAN_STATUS="in_progress"; while [ $SCAN_STATUS != "completed" ]; do SCAN_STATUS=$(curl -H "Content-Type:application/json" -H "X-AUTH-TOKEN:$BEAGLE_AUTH_TOKEN" -X GET "https://beaglesecurity.com/api/v1/scan/status?project_id=<PROJECT_ID>" | jq -r ".status"); sleep 30; done'
                 sh 'curl -H "Content-Type:application/json" -H "X-AUTH-TOKEN:$BEAGLE_AUTH_TOKEN" -X GET "https://beaglesecurity.com/api/v1/scan/report?project_id=<PROJECT_ID>" > beagle_report.json'
            }
        }
        /*
    stage('upload artifacts to nexus'){
            steps {
                 nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'http',
        nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
        groupId: 'QA',
        version:  "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
        repository: "${RELEASE_REPO}",
        credentialsId: "${NEXUS_LOGIN}",
        artifacts: [
            [
            artifactId: 'davapp',
            classifier: '',
            file: 'target/vprofile-v2.war',
            type: 'war'
            ]
        ]
     )
            }
        }
        stage('Building application image'){
            steps {
                script{
                    dockerImage = docker.build(registry + ":$BUILD_NUMBER", "./Docker/application/dev/")
                }
            }
        }
         stage('Push application image to dockerhub registry'){
            steps {
                script{
                    docker.withRegistry( '', registryCredential){ 
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('remove old docker image'){
            steps{
                sh "docker rmi $registry:$BUILD_NUMBER"
            }
        }
        */
    }  
    post {
        always {
            echo 'slack notification.'
            slackSend channel: '#davci-proj',
            color: COLOR_MAP[currentBuild.currentResult],
        message: "*${currentBuild.currentResult}:* job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }    
}